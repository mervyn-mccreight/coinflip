package de.fhwedel.coinflip.protocol.io;

import static org.assertj.core.api.Assertions.assertThat;

import java.io.File;
import java.math.BigInteger;

import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Test;

import de.fhwedel.coinflip.protocol.model.BaseProtocol;
import de.fhwedel.coinflip.protocol.model.id.ProtocolId;

public class SpecificationStepSixTest extends AbstractProtocolSpecificationTest {
  private BaseProtocol protocol;

  private static final String expectedDecryptedChosenCoinSide =
      "57c9a48c1ed3aba99a698e9df68a69d81a9ea9ca0968d187554405613c831de3b6fcdb6617401aa04ac1a039fa181443b46e9ef4b09314ff0be5b1aa1365b11b3e193a7b120a56af9c283538484e8082288a51c78c924d7fd0b334db0eaae9ab697293b9dadfeb6b016b25dca33d4bc04589caae139e39dcc8d66afa875f08934b704669bb6bfcc5ff61c558b533e76477ad619e90a56a130d43a4542b64740444c93bdc2b798b731ecec8f22b85b0032d8801395717e38dcc13e0d8bb125cf6c2357a1375f4df6dbe196226c75b1c0412d602ac5033342c4e807f7bdaf7106dd693b20e625fe9d66c60466d6576a18f2ea9dda081e4c2f93d486987c4ead739";
  private static final BigInteger a1 = new BigInteger(
      "17665904071322043195728095639140898894350784096070105386234255987578098056941368327990346460272880079406616416037627305060888338175944695883610156862061850647577135591138418024461256454750099955904240571185758506999871765166172086375032743230219380680632284549175333629624588870175933847446584430146564121139611038527644621276750462421751079898541858358393854256644489288109751999373291205348895711862118501479343045308926340943231442327830046072200329234672968572908813269969768360131847044988551487368594859481933518615278223812364664869369002993194784370868510830934292528723007096748380021717457031992331206249589");
  private static final BigInteger a2 = new BigInteger(
      "5458282484434444286586045114782639553167603656664569949341288085097698885283459256124086965664999321906066762331854862754563659536393761717089751866075233700414178231468369318753675172070038659851180661392663860373216006421505298405133804455607344271320764815863268881713345777283957662959597926489330743459517435825197698022775223284984993780012432321281008694002641056864605874459687028402998341253854654640872062396553944683743793140046064376513097384289288209882437334264922229651343888847035413927805889998634773863064867290469360384545404794951310809349655477424888324396711298528741687799159279927474430385123");

  @Before
  public void setUp() throws Exception {
    // given
    File file = new File("src/test/resources/protocol/specification/6.json");
    String jsonString = FileUtils.readFileToString(file);
    ProtocolParser parser = new ProtocolParser();
    protocol = parser.parseJson(jsonString).get();
  }

  @Test
  public void step() throws Exception {
    assertProtocolStep(protocol, ProtocolId.SIX);
  }

  @Test
  public void decryptedChosenCoinIsSet() throws Exception {
    assertThat(protocol.getDecryptedChosenCoin()).isEqualTo(expectedDecryptedChosenCoinSide);
  }

  @Test
  public void oneDecryptionKeyParameterPairIsSet() throws Exception {
    assertThat(protocol.getPrivateParametersForKeyA()).containsExactly(a1, a2);
    assertThat(protocol.getPrivateParametersForKeyB()).isEmpty();
  }
}
